/*
* @author dsalxv
* @date Mon Mar 06 15:02:24 MSK 2017
*/

package ru.iu.bachelor.sed.g03.specification.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string
import ru.iu.bachelor.sed.g03.specification.environment


	Use Case Model {

		use case system usergoal ugSecurelyUseSystem() {
			actor actAuthenticated[primary, active]
			actor actComCompany[secondary, reactive]
		
			reuse sfEnterLoginPassword[1..1]
			reuse sfSMSValidate[1..1]
			reuse oeLogin[1..1]
			reuse oeLogout[1..1]
		
			step a: actAuthenticated executes sfEnterLoginPassword
			step b: actComCompany executes sfSMSValidate
			step c: actAuthenticated executes sfSMSValidate
		}
		
		use case system subfunction sfEnterLoginPassword() {
			actor actAuthenticated[primary, active]
		
			returned messages {
				ieLoginPasswordCorrect returned to actAuthenticated
			}
		}
		
		use case system subfunction sfSMSValidate() {
			actor actAuthenticated[primary, active]
			actor actComCompany[secondary, reactive]
		}
		
		use case system subfunction oeLogin() {
			actor actAuthenticated[primary, active]
		}
		
		use case system subfunction oeLogout() {
			actor actAuthenticated[primary, active]
		}

		use case system summary suDeployAndRun() {
			actor actAdministrator[primary, active]
			actor actMsrCreator[secondary, active]
			actor actCoordinator[secondary, active]
			actor actActivator[secondary, proactive]
			actor actComCompany[secondary, active]
			
			reuse oeCreateSystemAndEnvironment[1..1]
			reuse ugAdministrateTheSystem[1..*]
			reuse suGlobalCrisisHandling[1..*]
			reuse oeSetClock[1..*]
			reuse oeSollicitateCrisisHandling[0..*]
			reuse oeAlert[1..*]
			
			step a: actMsrCreator executes oeCreateSystemAndEnvironment
			step b: actAdministrator executes ugAdministrateTheSystem
			step c: actComCompany executes oeAlert
			step d: actActivator executes oeSetClock
			step ^e: actActivator executes oeSollicitateCrisisHandling
			step f: actCoordinator executes suGlobalCrisisHandling
			
			ordering constraint 
        		"step (a) must be always the first step."
        	ordering constraint 
				"step (f) can be executed by different actCoordinator actors."
			ordering constraint 
				"if (e) then previously (d)."
		}
		
		use case system subfunction oeCreateSystemAndEnvironment(AqtyComCompanies:ptInteger) {
			actor actMsrCreator[primary, active]
		}
		
		use case system usergoal ugAdministrateTheSystem() {
			actor actAdministrator[primary,active]
			
// 			reuse ugSecurelyUseSystem[1..*]
// 			reuse oeAddCoordinator[1..*]
// 			reuse oeDeleteCoordinator[0..*]
// 			
// 			step a: actAdministrator
// 			executes ugSecurelyUseSystem
// 			step b: actAdministrator
// 			executes oeAddCoordinator
// 			step c: actAdministrator
// 			executes oeDeleteCoordinator
// 			
// 			ordering constraint
// 			"steps (a) (b) and (c) executions are interleaved
// 			(steps (b) and (c) have their protocol constrained
// 			by steps of (a))."
// 			ordering constraint
// 			"steps (a) (b) and (c) can be executed multiple times."
		}
		
		use case system summary suGlobalCrisisHandling() {
			actor actCoordinator[primary,active]
			
// 			reuse ugSecurelyUseSystem[1..*]
// 			reuse ugMonitor[1..*]
// 			reuse ugManageCrisis[1..*]

// 			step a: actCoordinator
// 				executes ugSecurelyUseSystem
// 			step b: actCoordinator
// 				executes ugMonitor
// 			step c: actCoordinator
// 				executes ugManageCrisis
// 			ordering constraint
// 				"steps (a) (b) and (c) executions are interleaved
// 				(steps (b) and (c) have their protocol constrained by steps of (a))."
// 			   ordering constraint
// 				"steps (a) (b) and (c) can be executed multiple times."
		}
		
		use case system subfunction oeSetClock(AcurrentClock:dtDateAndTime) {
			actor actActivator[primary,proactive]
		}
		
		use case system subfunction oeSollicitateCrisisHandling() {
			actor actActivator[primary,proactive]
			actor actCoordinator[secondary,passive,multiple]
			actor actAdministrator[secondary,passive]
    	}

		use case system subfunction oeAlert(
//								AetKind:etHumanKind,
								AdtMyDate:dtDate,
								AdtTime:dtTime//,
//								AdtPhoneNumber:dtPhoneNumber,
//								AdtGPSLocation:dtGPSLocation,
//								AdtComment:dtComment
								) {
    		actor actComCompany[primary,active]
		}
	}
}