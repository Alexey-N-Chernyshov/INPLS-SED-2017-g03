/*
* @author dsalxv
* @date Mon Mar 06 15:02:24 MSK 2017
*/

package ru.iu.bachelor.sed.g03.specification.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string
import ru.iu.bachelor.sed.g03.specification.environment


	Use Case Model {

		use case system usergoal ugSecurelyUseSystem() {
			actor actAuthenticated[primary, active]
			actor actComCompany[secondary, reactive]
		
			reuse sfEnterLoginPassword[1..1]
			reuse sfSMSValidate[1..1]
			reuse oeLogin[1..1]
			reuse oeLogout[1..1]
		
			step a: actAuthenticated executes sfEnterLoginPassword
			step b: actComCompany executes sfSMSValidate
			step c: actAuthenticated executes sfSMSValidate
		}
		
		use case system subfunction sfEnterLoginPassword() {
			actor actAuthenticated[primary, active]
		
			returned messages {
				ieLoginPasswordCorrect returned to actAuthenticated
			}
		}
		
		use case system subfunction sfSMSValidate() {
			actor actAuthenticated[primary, active]
			actor actComCompany[secondary, reactive]
		}
		
		use case system subfunction oeLogin() {
			actor actAuthenticated[primary, active]
		}
		
		use case system subfunction oeLogout() {
			actor actAuthenticated[primary, active]
		}

		use case system summary suDeployAndRun() {
			//actor actMsrCreator[primary, active]
			//actor actCoordinator[primary, active]
			//actor actAdministrator[primary, active]
			//actor actActivator[primary, proactive]
			//actor actComCompany[primary, active]
			
			reuse oeCreateSystemAndEnvironment[1..1]
			reuse ugAdministrateTheSystem[1..*]
			reuse suGlobalCrisisHandling[1..*]
			reuse oeSetClock[1..*]
			reuse oeSollicitateCrisisHandling[0..*]
			reuse oeAlert[1..*]
			
			step a: actMsrCreator executes oeCreateSystemAndEnvironment
			step b: actAdministrator executes ugAdministrateTheSystem
			step c: actComCompany executes oeAlert
			step d: actActivator executes oeSetClock
			step e: actActivator executes oeSollicitateCrisisHandling
			step f: actCoordinator executes suGlobalCrisisHandling
			
			ordering constraint 
        		"step (a) must be always the first step."
        	ordering constraint 
				"step (f) can be executed by different actCoordinator actors."
			ordering constraint 
				"if (e) then previously (d)."
		}
		
		use case system subfunction oeCreateSystemAndEnvironment(AqtyComCompanies:ptInteger) {
			actor actMsrCreator[primary, active]
		}
		
		use case system usergoal ugAdministrateTheSystem() {
			actor actAdministrator[primary,active]
		}
		
		use case system usergoal suGlobalCrisisHandling() {
			actor actCoordinator[primary,active]
		}
		
		use case system subfunction oeSetClock(AcurrentClock:dtDateAndTime) {
			actor actActivator[primary,proactive]
		}
		
		use case system subfunction oeSollicitateCrisisHandling() {
			actor actActivator[primary,proactive]
			actor actCoordinator[secondary,passive,multiple]
			actor actAdministrator[secondary,passive]
    	}

		use case system subfunction oeAlert(
//								AetKind:etHumanKind,
								AdtMyDate:dtDate,
								AdtTime:dtTime//,
//								AdtPhoneNumber:dtPhoneNumber,
//								AdtGPSLocation:dtGPSLocation,
//								AdtComment:dtComment
								) {
    		actor actComCompany[primary,active]
		}
	use case system usergoal ugManageCrisis() {
		actor actCoordinator[primary, active]
		
		reuse oeValidateAlert[0..*]
		reuse oeSetCrisisStatus[0..*]
		reuse oeSetCrisisHandler[0..*]
		reuse oeReportOnCrisis[0..*]
		reuse oeCloseCrisis[0..*]
		reuse oeInvalidateAlert[0..*]
		
		step a: actCoordinator executes oeValidateAlert
		step b: actCoordinator executes oeSetCrisisStatus 
		step c: actCoordinator executes oeSetCrisisHandler
		step d: actCoordinator executes oeReportOnCrisis
		step e: actCoordinator executes oeCloseCrisis
		step f: actCoordinator executes oeInvalidateAlert
		}
	use case system subfunction oeValidateAlert() {
			actor actCoordinator[primary, active]
		}
	use case system subfunction oeSetCrisisStatus() {
			actor actCoordinator[primary, active]
		}
	use case system subfunction oeSetCrisisHandler() {
			actor actCoordinator[primary, active]
		}
	use case system subfunction oeReportOnCrisis() {
			actor actCoordinator[primary, active]
		}
	use case system subfunction oeCloseCrisis() {
			actor actCoordinator[primary, active]
		}
	use case system subfunction oeInvalidateAlert() {
			actor actCoordinator[primary, active]
		}
		
	use case system usergoal ugMonitor() {
		actor actCoordinator[primary, active]
		
		reuse oeGetCrisisSet[0..*]
		reuse oeGetAlertsSet[0..*]
		
		step a: actCoordinator executes oeGetAlertsSet
		step b: actCoordinator executes oeGetCrisisSet
		}
	use case system subfunction oeGetCrisisSet() {
			actor actCoordinator[primary, active]
		}
	use case system subfunction oeGetAlertsSet() {
			actor actCoordinator[primary, active]
		}
	}
}